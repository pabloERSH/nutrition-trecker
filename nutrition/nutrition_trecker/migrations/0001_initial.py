# Generated by Django 5.2.4 on 2025-08-12 20:05

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.datetime
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "user_id",
                    models.BigIntegerField(db_index=True, verbose_name="Пользователь"),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Название рецепта"),
                ),
                ("description", models.TextField(blank=True, verbose_name="Описание")),
            ],
            options={
                "verbose_name": "Рецепт",
                "verbose_name_plural": "Рецепты",
            },
        ),
        migrations.CreateModel(
            name="BaseFood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        max_length=255,
                        unique=True,
                        verbose_name="Название продукта",
                    ),
                ),
                (
                    "proteins",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fats",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "kcal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        editable=False,
                        max_digits=6,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Базовый продукт",
                "verbose_name_plural": "Базовые продукты",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            (
                                "proteins__lte",
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.expressions.CombinedExpression(
                                        models.Value(100), "-", models.F("fats")
                                    ),
                                    "-",
                                    models.F("carbohydrates"),
                                ),
                            )
                        ),
                        name="basefood_nutrition_sum_valid",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="CustomFood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                ("user_id", models.BigIntegerField(db_index=True)),
                ("custom_name", models.CharField(db_index=True, max_length=255)),
                (
                    "proteins",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fats",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        decimal_places=1,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "kcal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        editable=False,
                        max_digits=6,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Пользовательский продукт",
                "verbose_name_plural": "Пользовательские продукты",
                "indexes": [
                    models.Index(
                        fields=["user_id", "custom_name"],
                        name="nutrition_t_user_id_48a434_idx",
                    )
                ],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user_id", "custom_name"),
                        name="unique_customfood_per_user",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            (
                                "proteins__lte",
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.expressions.CombinedExpression(
                                        models.Value(100), "-", models.F("fats")
                                    ),
                                    "-",
                                    models.F("carbohydrates"),
                                ),
                            )
                        ),
                        name="customfood_nutrition_sum_valid",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="EatenFood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                ("user_id", models.BigIntegerField(db_index=True)),
                (
                    "eaten_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Дата не может быть старше 90 дней.",
                    ),
                ),
                (
                    "weight_grams",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ]
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "proteins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fats",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "kcal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        editable=False,
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "base_food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_trecker.basefood",
                    ),
                ),
                (
                    "custom_food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_trecker.customfood",
                    ),
                ),
                (
                    "recipe_food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_trecker.recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Приём пищи",
                "verbose_name_plural": "Приёмы пищи",
                "indexes": [
                    models.Index(
                        fields=["user_id", "eaten_at"],
                        name="nutrition_t_user_id_f1a25a_idx",
                    )
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("base_food__isnull", False),
                                ("custom_food__isnull", True),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                                ("recipe_food__isnull", True),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", False),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                                ("recipe_food__isnull", True),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", True),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                                ("recipe_food__isnull", False),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", True),
                                ("name__isnull", False),
                                ("proteins__isnull", False),
                                ("fats__isnull", False),
                                ("carbohydrates__isnull", False),
                                ("recipe_food__isnull", True),
                                (
                                    "proteins__lte",
                                    django.db.models.expressions.CombinedExpression(
                                        django.db.models.expressions.CombinedExpression(
                                            models.Value(100), "-", models.F("fats")
                                        ),
                                        "-",
                                        models.F("carbohydrates"),
                                    ),
                                ),
                            ),
                            _connector="OR",
                        ),
                        name="eatenfood_has_valid_source",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("weight_grams__gte", 1), ("weight_grams__lte", 10000)
                        ),
                        name="eatenfood_weight_valid",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            (
                                "eaten_at__lte",
                                django.db.models.functions.datetime.Now(),
                            ),
                            (
                                "eaten_at__gte",
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.datetime.Now(),
                                    "-",
                                    models.Value(datetime.timedelta(days=90)),
                                ),
                            ),
                        ),
                        name="eatenfood_date_valid",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date when the object was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date when the object was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "weight_grams",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ]
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "proteins",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "fats",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "kcal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        editable=False,
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "base_food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_trecker.basefood",
                    ),
                ),
                (
                    "custom_food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="nutrition_trecker.customfood",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="nutrition_trecker.recipe",
                        verbose_name="Рецепт",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ингредиент",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("base_food__isnull", False),
                                ("custom_food__isnull", True),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", False),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", True),
                                ("name__isnull", True),
                                ("proteins__isnull", True),
                                ("fats__isnull", True),
                                ("carbohydrates__isnull", True),
                            ),
                            models.Q(
                                ("base_food__isnull", True),
                                ("custom_food__isnull", True),
                                ("name__isnull", False),
                                ("proteins__isnull", False),
                                ("fats__isnull", False),
                                ("carbohydrates__isnull", False),
                                (
                                    "proteins__lte",
                                    django.db.models.expressions.CombinedExpression(
                                        django.db.models.expressions.CombinedExpression(
                                            models.Value(100), "-", models.F("fats")
                                        ),
                                        "-",
                                        models.F("carbohydrates"),
                                    ),
                                ),
                            ),
                            _connector="OR",
                        ),
                        name="recipeingredient_has_valid_source",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("weight_grams__gte", 1), ("weight_grams__lte", 10000)
                        ),
                        name="recipeingredient_weight_valid",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("base_food__isnull", False)),
                        fields=("recipe", "base_food"),
                        name="unique_recipe_ingredient_basefood",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("custom_food__isnull", False)),
                        fields=("recipe", "custom_food"),
                        name="unique_recipe_ingredient_customfood",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(
                            ("base_food__isnull", True), ("custom_food__isnull", True)
                        ),
                        fields=("recipe", "name", "proteins", "fats", "carbohydrates"),
                        name="unique_recipe_ingredient_manual",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserFavorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.BigIntegerField(db_index=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "base_food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="nutrition_trecker.basefood",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user_id"], name="nutrition_t_user_id_0205c7_idx"
                    ),
                    models.Index(
                        fields=["base_food"], name="nutrition_t_base_fo_084a11_idx"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user_id", "base_food"),
                        name="unique_favorite_basefood_for_user",
                    )
                ],
            },
        ),
    ]
